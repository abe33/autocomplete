// Generated by CoffeeScript 1.8.0

/*
  lib/responder/responder-process.coffee
 */

(function() {
  var AutocompleteComm, Provider, ResponderBuffer, buffer, comm, providers, send, spawn, _;

  spawn = require('child_process').spawn;

  _ = require('underscore-plus');

  Provider = require('./provider');

  AutocompleteComm = require('autocomplete-api').AutocompleteComm;

  ResponderBuffer = require('./responder-buffer');

  comm = new AutocompleteComm;

  buffer = new ResponderBuffer;

  providers = [];

  send = function(msg) {
    return process.stdout.write(JSON.stringify({
      msg: msg
    }) + '\n');
  };

  process.stdin.on('data', function(data) {
    var msg, recvObjs, _i, _len, _results;
    recvObjs = comm.recvDemuxObj(data, function(err, line) {
      return console.log('recv json parse error:' + '\n', line, '\n', err.message);
    });
    _results = [];
    for (_i = 0, _len = recvObjs.length; _i < _len; _i++) {
      msg = recvObjs[_i];
      switch (msg.cmd) {
        case 'register':
          _results.push(providers.push(new Provider(msg.path)));
          break;
        case 'newEditor':
          _results.push(buffer = new ResponderBuffer(msg.text));
          break;
        case 'bufferEdit':
          _results.push(buffer.applyChg(msg));
          break;
        case 'noActiveEditor':
          _results.push(buffer = null);
          break;
        default:
          _results.push(console.log('responder, unknown msg cmd:', msg));
      }
    }
    return _results;
  });

}).call(this);
